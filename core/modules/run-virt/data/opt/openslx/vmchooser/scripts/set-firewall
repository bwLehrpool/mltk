#!/bin/bash

# Do not rename/move this script, or change fwtool.c accordingly

[ "$UID" = "0" ] || exit 1

RULES="$( mktemp )"
AUTORULES="$( mktemp )"
REMOTERULES="$( mktemp )"
LOGFILE="$( mktemp )"
DNSCFG="$2" # optional, write dnsmasq config here if applicable
DNSPORT="$3" # required if $2 given
[ -z "$DNSPORT" ] && DNSCFG=

readonly RULES AUTORULES REMOTERULES LOGFILE DNSCFG DNSPORT

[ -n "$RULES" ] || exit 2

trap 'rm -f -- "$RULES" "$AUTORULES" "$REMOTERULES" "$LOGFILE"' EXIT

[ -n "$1" ] || exit 3

[ "${#1}" -ge 10 ] || exit 4
[ "${#1}" -lt 40 ] || exit 5

. /opt/openslx/config

declare -rg DNS_IPT_FILE="/opt/openslx/iptables/rules.d/00-dnsblock"

# Create/reset all our chains
rm -f -- "$DNS_IPT_FILE"
if ! (
	set -e
	for TOOL in iptables ip6tables; do
		$TOOL -w -F runvirt-INPUT || $TOOL -w -N runvirt-INPUT
		$TOOL -w -F runvirt-OUTPUT || $TOOL -w -N runvirt-OUTPUT

		if ! $TOOL -w -C INPUT -i br0 -j runvirt-INPUT; then
			$TOOL -w -A INPUT -i br0 -j runvirt-INPUT
		fi
		if ! $TOOL -w -C OUTPUT -o br0 -j runvirt-OUTPUT; then
			$TOOL -w -A OUTPUT -o br0 -j runvirt-OUTPUT
		fi
		if ! $TOOL -w -C FORWARD -i br0 -j runvirt-INPUT; then
			$TOOL -w -A FORWARD -i br0 -j runvirt-INPUT
		fi
		if ! $TOOL -w -C FORWARD -o br0 -j runvirt-OUTPUT; then
			$TOOL -w -A FORWARD -o br0 -j runvirt-OUTPUT
		fi
		# Allow all loopback
		$TOOL -w -A runvirt-INPUT -i lo -j ACCEPT
		$TOOL -w -A runvirt-OUTPUT -o lo -j ACCEPT
		# Allow conntrack so creating out-rules is enough usually
		$TOOL -w -A runvirt-INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
		$TOOL -w -A runvirt-OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	done
	true
); then
	echo "Creating or resetting runvirt iptables chains failed"
	exit 7
fi


parse_uri () {
	local scheme
	ip="${1,,}"
	scheme="${ip%%://*}"
	ip="${ip#*://}"
	port="${ip##*:}"
	if [[ "$port" =~ ^[0-9]+$ ]]; then
		ip="${ip%:*}"
	elif [ "$scheme" = "ldaps" ]; then
		port=636
	else
		port=389
	fi
	(( port >= 0 && port <= 65535 )) || port=0
}

add_ips () {
	# add_ips "IN/OUT" "IP1 IP2 IPn" "PORT" "ACCEPT/REJECT"
	local ip port port_def
	port_def="$3"
	[[ -z "$1" || -z "$2" || -z "$port_def" || -z "$4" ]] && return 1
	for ip in $2; do
		port="${ip#*:}"
		if (( port > 0 && port < 65536 )) 2> /dev/null; then
			ip="${ip%:*}"
		else
			port="$port_def"
		fi
		echo "$1 ${ip} ${port} $4" >> "${AUTORULES}"
	done
}

# get all DNS servers in use
dnslist="$( ( echo "$SLX_DNS"; awk '$1 == "nameserver" {print $2}' /etc/resolv.conf ) | sort -u )"

# Auto-allow important servers from config
add_ips "OUT" "$dnslist" 53 "ACCEPT"
add_ips "OUT" "$SLX_DNBD3_SERVERS" 5003 "ACCEPT"
add_ips "OUT" "$SLX_DNBD3_FALLBACK" 5003 "ACCEPT"
add_ips "OUT" "$SLX_KCL_SERVERS $SLX_PXE_SERVER_IP" 0 "ACCEPT"
add_ips "OUT" "$SLX_PROXY_IP" "$SLX_PROXY_PORT" "ACCEPT"

# sssd
sssd="$( < /etc/sssd/sssd.conf  grep -P '^\s*ldap_(backup_)?uri\s*=' | sed -r 's/^[^=]*=//' )"
sssd="${sssd//,/ }"
for uri in $sssd; do
	parse_uri "$uri"
	add_ips "OUT" "$ip" "$port" "ACCEPT"
done

# pam-slx-plug
for file in /opt/openslx/pam/slx-ldap.d/*; do
	[ -f "$file" ] || continue
	uris="$( grep -Po "(?<=LDAP_URI=')[^']*" "$file" )"
	for uri in $uris; do
		parse_uri "$uri"
		add_ips "OUT" "$ip" "$port" "ACCEPT"
	done
done

if [ -n "$SLX_VM_NFS" ]; then
	IP=
	if [ "${SLX_VM_NFS:0:2}" = '//' ]; then
		IP=${SLX_VM_NFS:2}
		IP=${IP%%/*}
	else
		IP=${SLX_VM_NFS%%:*}
	fi
	[ -n "$IP" ] && add_ips "OUT" "$IP" 0 "ACCEPT"
fi

sort -u "${AUTORULES}" > "${RULES}"

# determine the URL to download the netrules from
if [ -s /opt/openslx/vmchooser/config/resource_urls.conf ]; then
	. /opt/openslx/vmchooser/config/resource_urls.conf
fi
NETRULES_URL=
[ -n "$url_lecture_netrules" ] && NETRULES_URL="${url_lecture_netrules//%UUID%/${1}}"
[ -z "$NETRULES_URL" ] && NETRULES_URL="${SLX_VMCHOOSER_BASE_URL}/lecture/$1/netrules"
wget -T 8 -O - "${NETRULES_URL}" > "${REMOTERULES}" 2> "${LOGFILE}"
RET=$?

if [ "$RET" != "0" ]; then
	echo "wget exit code: $RET :-("
	grep -q "ERROR 404" "${LOGFILE}" && exit 0 # Old sat, doesn't support firewall rules
	echo "WGET error output:"
	cat "${LOGFILE}"
	echo "------------ Downloaded content follows"
	cat "${REMOTERULES}"
	exit 6
fi

# Download OK, append to rules
cat "${REMOTERULES}" >> "${RULES}"

# Determine if we have dnsmasq as we need to know this while setting up iptables rules
dnsmasq=
if [ -n "$DNSCFG" ] && [ -f "$DNSCFG" ] && [ -n "$dnslist" ]; then
	dnsmasq="$( which dnsmasq || command -v dnsmasq )"
fi
declare -rg ILLEGAL_DNS='[?@:*/ ]'
declare -rg V4='^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])\.?\b){4}(/[0-9]+)?$'
# https://stackoverflow.com/a/17871737
declare -rg V6='^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/[0-9]+)?$'

if ! (
	declare -a IPLINE1 IPLINE2 IPLINE2with
	blockall=
	while read -r DIR DEST PORT ACTION _ || [ -n "$DIR" ]; do
		if [[ -z "$DEST" || -z "$PORT" || -z "$ACTION" ]]; then
			# Should this be a hard error?
			echo "Ignoring invalid rule: '$DIR $DEST $PORT $ACTION'"
			continue
		fi
		IPLINE1=( "-w" )
		IPLINE2=( )
		if [ "$DIR" = "IN" ]; then
			IPLINE1+=( "-A" "runvirt-INPUT" )
		elif [ "$DIR" = "OUT" ]; then
			IPLINE1+=( "-A" "runvirt-OUTPUT" )
		else
			continue
		fi
		if ! [[ $PORT =~ ^[0-9]+$ ]] || (( PORT > 65535 || PORT < 0 )); then
			echo "Invalid port: '$PORT'"
			continue
		fi
		if [ "$DEST" != "*" ]; then
			if [ "$DIR" = "OUT" ]; then
				IPLINE1+=( "-d" "$DEST" )
			else
				IPLINE1+=( "-s" "$DEST" )
			fi
		fi
		if [ "$PORT" != 0 ]; then
			IPLINE2+=( "--dport" "$PORT" )
		fi
		IPLINE2+=( "-j" "$ACTION" )
		IPLINE2with=( "${IPLINE2[@]}" )
		[ "$ACTION" = "REJECT" ] && IPLINE2with+=( "--reject-with" "tcp-reset" )
		both=
		# See if it's a hostname potentially
		if ! [[ $DEST =~ $V6 || $DEST =~ $V4 ]]; then
			if [ "$DIR" != OUT ] || [ -z "$dnsmasq" ] || [ "$PORT" != 0 ]; then
				both=1 # Not outgoing, dnsmasq not found, or specific port - cannot do on DNS level
			elif [[ $DEST =~ $ILLEGAL_DNS ]] && [ "$DEST" != '*' ]; then
				both=1 # Not a legal hostname and not wildcard (default rule)
			else
				# Can do via DNS :-)
				if [ "$ACTION" != "ACCEPT" ]; then
					# BLOCK
					if [ "$DEST" = "*" ]; then
						# Special case: '*' - default rule, so BLOCK -> no default servers
						[ -z "$blockall" ] && blockall=1
					else
						# A host - map to 0.0.0.0
						for dnsip in $dnslist; do
							echo "address=/$DEST/"
						done >> "$DNSCFG"
					fi
				else
					# ACCEPT
					if [ "$DEST" = "*" ]; then
						# Special case: '*' - degault rule, so ACCEPT -> default servers
						[ -z "$blockall" ] && blockall=0
					else
						# specifically map to out DNS servers
						for dnsip in $dnslist; do
							echo "server=/$DEST/$dnsip"
						done >> "$DNSCFG"
					fi
				fi
			fi
		fi
		if [ -n "$both" ] || [[ $DEST =~ $V6 ]]; then # IPv6?
			if [ "$PORT" = 0 ]; then
				[ "$ACTION" = "REJECT" ] && ip6tables "${IPLINE1[@]}" -p tcp "${IPLINE2with[@]}"
				ip6tables "${IPLINE1[@]}" "${IPLINE2[@]}"
			else
				ip6tables "${IPLINE1[@]}" -p tcp "${IPLINE2with[@]}"
				ip6tables "${IPLINE1[@]}" -p udp "${IPLINE2[@]}"
			fi
		fi
		if [ -n "$both" ] || [[ $DEST =~ $V4 ]]; then # IPv4
			if [ "$PORT" = 0 ]; then
				[ "$ACTION" = "REJECT" ] && iptables "${IPLINE1[@]}" -p tcp "${IPLINE2with[@]}"
				iptables "${IPLINE1[@]}" "${IPLINE2[@]}"
			else
				iptables "${IPLINE1[@]}" -p tcp "${IPLINE2with[@]}"
				iptables "${IPLINE1[@]}" -p udp "${IPLINE2[@]}"
			fi
		else
		fi
	done < "$RULES"
	if [ -s "$DNSCFG" ]; then
		# Try to disable DoH
		echo "address=/use-application-dns.net/" >> "$DNSCFG" # firefox
		# Block known servers from https://github.com/curl/curl/wiki/DNS-over-HTTPS
		# Copy table only, run
		# grep -oP '(?<=https://)\S+(?=/)' /tmp/doh.html | sort -u
		# to get list, then translate to IP addresses:
		# for ...; do host "$i" | grep -oP '(?<= address ).*' | sort -u
		# (then check for invalid/private addresses)
		for DEST in $( cat /opt/openslx/vmchooser/data/doh-servers ); do
			if [[ $DEST =~ $V6 ]]; then
				ip6tables -w -I runvirt-INPUT 1 -d "$DEST" -p tcp --dport 443 \
					-j REJECT --reject-with tcp-reset
			else
				iptables -w -I runvirt-INPUT 1 -d "$DEST" -p tcp --dport 443 \
					-j REJECT --reject-with tcp-reset
			fi
		done
		# Handle dns default rule
		if [ "$blockall" = 1 ]; then
			echo "address=/#/" >> "$DNSCFG"
		else
			for dnsip in $dnslist; do
				echo "server=$dnsip"
			done >> "$DNSCFG"
		fi
		# Redirect UDP:53 to dnsmasq on whatever port
		# physdev /sys/class/net/br0/brif/
		cat "$DNS_IPT_FILE" <<-EOF
		iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-port "$DNSPORT"
		iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-port "$DNSPORT"
		ip6tables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-port "$DNSPORT"
		ip6tables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-port "$DNSPORT"
		EOF
	fi
); then
	echo "Setting up one or more firewall rules via iptables failed."
	exit 8
fi

exit 0
