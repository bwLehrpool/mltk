#!/bin/bash

USER_CONTAINER_CONFIG=""

echo "+ source user_config $USER_CONTAINER_CONFIG"
source $USER_CONTAINER_CONFIG

load_image () {

	IMAGE_SIZE=$(stat --printf="%s" $VM_DISKFILE_RO)
	# check file size of VM_DISKFILE_RO is equals to 4096 = 4kB (because of padding)
	if [[ $IMAGE_SIZE -eq 4096 ]]; then 
		echo "+ build container image with build_context"
		echo "+ docker build --tag $CONTAINER_IMAGE_NAME $CONTAINER_BUILD_CONTEXT"
		docker build --tag $CONTAINER_IMAGE_NAME $CONTAINER_BUILD_CONTEXT
	else
		# In this case a pre build container image (tar archive from "docker save ...") 
		# will be loaded into the local docker daemon. 
		echo "+ load container image... (please be patient)"
		# create TMP_FILE for docker load output
		local TMP_FILE=$(mktemp)

		# TODO no progress output for docker load
		# load image from tar file
		pv -cN "Image Transfer" < $VM_DISKFILE_RO | docker load -q > $TMP_FILE
		echo "+ $(cat $TMP_FILE)"

		local REPO_TAG=$(head -n 1 $TMP_FILE | cut -d" " -f3)
		# rename image 
		docker tag "$REPO_TAG" "$CONTAINER_IMAGE_NAME"
		rm -f -- "$TMP_FILE"
	fi
	retval=$?
	return $retval
}

main () 
{

	if [[ -n $CONTAINER_REPO_NAME ]]; then
		echo "pull container $CONTAINER_REPO_NAME"
		docker pull $CONTAINER_REPO_NAME

		[ "$?" != 0 ] && echo ".. docker pull not successful ...giving up..." && exit -1

		CONTAINER_IMAGE_NAME="$CONTAINER_REPO_NAME"
	fi

	# TODO only check by image name could be bad, images whith a same name could exist
	
	# check if the container_image_name already loaded in docker daemon
	if [[ -z $(docker images $CONTAINER_IMAGE_NAME -q) ]]; then
		echo "+ Image unknown by docker daemon ..."
		load_image

		if [[ "$retval" != "0" ]]; then
			echo "...could not build/load container image!...giving up..."
			return -1
		fi
	fi

	if [[ -n "$(docker ps -aq)" ]]; then
		echo "+ cleanup running container"
		docker rm --force $(docker ps -aq) > /dev/null
	fi

	echo "+ start container..."
	echo "+ docker run $CONTAINER_RUN_OPTIONS $CONTAINER_BIND_MOUNT_STRING $CONTAINER_IMAGE_NAME $CONTAINER_RUN_COMMAND"
	docker run $CONTAINER_RUN_OPTIONS $CONTAINER_BIND_MOUNT_STRING $CONTAINER_IMAGE_NAME $CONTAINER_RUN_COMMAND

	if [[ "$?" != "0" ]]; then
		echo "...container start failed!...giving up..."
		return -1
	fi
	
	if [[ -n $RUNSCRIPT ]]; then
		echo "+ execute user runscript"
		NOHUP_TMP=$(mktemp)
		nohup /bin/bash $RUNSCRIPT > "$NOHUP_TMP" & tail -f "$NOHUP_TMP"
	fi 
}

main 

# keeping terminal open
bash
